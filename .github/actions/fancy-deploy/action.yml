name: "Fancy Deploy v1.2 + Docker + DingTalk"
description: "构建镜像 + 上传 docker-compose.yml + SSH 部署 + GPT 总结 + 钉钉通知"

inputs:
  server:
    description: "部署服务器 IP"
    required: true
  ssh-private-key:
    description: "SSH 私钥"
    required: true
  docker-username:
    description: "DockerHub 用户名"
    required: true
  docker-password:
    description: "DockerHub 密码"
    required: true
  dingtalk-webhook:
    description: "钉钉机器人 webhook"
    required: true
  openai-key:
    description: "DeepSeek / OpenAI 密钥"
    required: true
  docker-image-tag:
    description: "Docker 镜像标签"
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh-private-key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ inputs.server }} >> ~/.ssh/known_hosts

    - name: 🐳 Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    # 暂时关闭打包和上传的部分 节约测试时间
    # - name: 🏗️ Docker Build & Push
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: .
    #     file: Dockerfile
    #     push: true
    #     tags: ${{ inputs.docker-image-tag }}

    - name: 📤 Upload docker-compose.yml to Server
      shell: bash
      run: |
        scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ inputs.server }}:/opt/vapor/docker-compose.yml

    - name: 🚀 Remote Deploy
      shell: bash
      run: |
        ssh root@${{ inputs.server }} <<EOF
        set -e
        echo "🔐 检查 docker-compose.yml 权限"
        chmod 644 /opt/vapor/docker-compose.yml

        echo "🚀 开始部署流程"
        cd /opt/vapor

        CURRENT_PORT=$(grep -oP 'proxy_pass http://127.0.0.1:\K\d+' /opt/1panel/apps/openresty/openresty/conf/conf.d/test.yiqian.site.conf || echo "8080")
        NEW_PORT=$([ "$CURRENT_PORT" = "8080" ] && echo "8081" || echo "8080")
        NEW_SERVICE=$([ "$NEW_PORT" = "8080" ] && echo "app-blue" || echo "app-green")
        OLD_SERVICE=$([ "$NEW_PORT" = "8080" ] && echo "app-green" || echo "app-blue")

        docker-compose pull $NEW_SERVICE
        docker-compose up -d $NEW_SERVICE
        sleep 30
        curl -f -H "X-API-Key: sinduke" http://localhost:$NEW_PORT/sinduke/health || exit 1

        docker-compose pull $OLD_SERVICE
        docker-compose up -d $OLD_SERVICE
        sleep 30
        curl -f -H "X-API-Key: sinduke" http://localhost:$CURRENT_PORT/sinduke/health || exit 1

        sed -i "s/proxy_pass http:\/\/127.0.0.1:$CURRENT_PORT/proxy_pass http:\/\/127.0.0.1:$NEW_PORT/" /opt/1panel/apps/openresty/openresty/conf/conf.d/test.yiqian.site.conf
        systemctl restart 1panel
        echo "✅ 部署完成"
        EOF

    - name: 💬 Generate Deploy Summary with ChatGPT
      id: gpt
      env:
        OPENAI_API_KEY: ${{ inputs.openai-key }}
      shell: bash
      run: |

        LAST_MSG=$(git log -1 --pretty=%B)
        echo "Commit Message: $LAST_MSG"
        ESCAPED_CONTENT=$(jq -Rn --arg msg "请用一段开玩笑的话简要总结下面这次提交的内容: $LAST_MSG" '$msg')

        REQUEST_BODY=$(cat <<EOF
        {
        "model": "deepseek-chat",
        "messages": [
        {
        "role": "user",
        "content": $ESCAPED_CONTENT
        }
        ]
        }
        EOF
        )

        RESPONSE=$(curl https://api.deepseek.com/chat/completions \
          -s -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$REQUEST_BODY")

        SUMMARY=$(echo "$RESPONSE" | jq -r .choices[0].message.content)
        {
          echo "summary<<EOF"
          echo "$SUMMARY"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: 📢 Notify DingTalk
      if: always()
      shell: bash
      env:
        DINGTALK_WEBHOOK: ${{ inputs.dingtalk-webhook }}
        GPT_SUMMARY: ${{ steps.gpt.outputs.summary }}
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        NOW=$(date '+%Y-%m-%d %H:%M:%S')
        TEXT=$(cat <<EOF
        ### 📜 帝国部署成功：「$REPO_NAME」 ⚔️

        - 👤 人员：\`${{ github.actor }}\`
        - 🌿 分支：\`${{ github.ref_name }}\`
        - 🕰️ 时间：\`$NOW\`
        - 🖥️ 服务器：\`${{ inputs.server }}\`

        ---

        $GPT_SUMMARY

        ---

        🎉 欢迎大爷下次再来 ~
        EOF
        )
        
        # Send to DingTalk
        JSON_PAYLOAD=$(jq -n --arg title "✨God Mode✨" --arg text "$TEXT" '{msgtype: "markdown", markdown: {title: $title, text: $text}}')
        curl "$DINGTALK_WEBHOOK" \
          -H 'Content-Type: application/json' \
          -d "$JSON_PAYLOAD"

    - name: 💥 Print Final ASCII
      shell: bash
      run: |
        cat <<EOF
           ____       _     __  __           _      
         / ___| ___ | |_  |  \/  | ___   __| | ___ 
        | |  _ / _ \| __| | |\/| |/ _ \ / _` |/ _ \
        | |_| | (_) | |_  | |  | | (_) | (_| |  __/
         \____|\___/ \__| |_|  |_|\___/ \__,_|\___|
        
          ✨ GitHub Actions · God Mode Engaged ✨
        EOF